#pragma once

#include "LtTrack.h"
#include "LtTree.h"
#include "LtExtendTrack.h"
#include "LtComputeFeature.h"
#include "LtPruningTracks.h"
#include "LtStopTracks.h"
#include "LtFilterCompletedTrack.h"
#include "LtFilterTree.h"

namespace Lt{

	/** class LtTracker
	*	\brief Line tracker algorithm
	*
	*	The class is templated over the Tree representation of the tracks. 
	*	The tree type may in fact depend on the algorithm used by the tracker. 
	*	3 mains functions are involved in the algorithm:
	*	- extension function that generate extended tracks from an existing track
	*	- pruning function that removes some tracks generated by the extension function
	*	- stop function that ends a tracks (it won't be extended anymore but it may still be removed during pruning)
	*	Those functions have to be set before the tracking via respectively AddExtensionFunc, AddPruningFunc and AddStopFunc.
	*
	*/
	template<typename TTree>
	class LtTracker{
	public:
	///////////////////////////////////////////////////////////////
	// Typedefs
	///////////////////////////////////////////////////////////////
		typedef TTree TreeType;

	///////////////////////////////////////////////////////////////
	// Build and clean
	///////////////////////////////////////////////////////////////
		LtTracker();
		~LtTracker();

		int Reset();
		int RemoveStopFuncs();

		int AddExtensionFunc(LtExtendTrack<TreeType>*);
		int AddPruningFunc(LtPruningTracks<TreeType>*);
		int AddStopFunc(LtStopTracks<TreeType>*);
		int AddFilterCompletedFunc(LtFilterCompletedTrack<TreeType>*);
		int AddFilterTreeFunc(LtFilterTree<TreeType>*);

		int AddFeatureFunc(LtComputeFeature<TreeType>*);
	///////////////////////////////////////////////////////////////
	// Inputs
	///////////////////////////////////////////////////////////////
		int AddSeed(float xSeed, float ySeed, float dir);
		int AddSeed(float x, float y);
		int AddEndPoint(float x, float y);

	///////////////////////////////////////////////////////////////
	// Tracking functions
	///////////////////////////////////////////////////////////////
		int Track();

	///////////////////////////////////////////////////////////////
	// Outputs
	///////////////////////////////////////////////////////////////
		int GetBestTrack(LtTrack* besttrack);
		int GetBestTrackAndScores(LtTrack* besttrack, float *score, float *length);
		int GetBestTrackV(LtTrack* besttrack);
		int GetBestTrackInd(int &ind);

		std::vector<LtTrack*> GetTracks();

		int	ClearTracks();

	protected:
	///////////////////////////////////////////////////////////////
	// Members 
	///////////////////////////////////////////////////////////////
		// Tree whose nodes are points of tracks and leaves represents the tracks
		TreeType* m_Tree;

		std::vector<LtExtendTrack<TreeType>*> m_ExtendFuncs;
		std::vector<LtPruningTracks<TreeType>*> m_PruningFuncs;
		std::vector<LtStopTracks<TreeType>*> m_StopFuncs;
		std::vector<LtFilterCompletedTrack<TreeType>*> m_FilterCompletedFuncs;
		std::vector<LtFilterTree<TreeType>*> m_FilterTreeFuncs;

		std::vector<LtComputeFeature<TreeType>*> m_FeatureFuncs;

		// Current number of iterations
		int m_NbIterations;

	///////////////////////////////////////////////////////////////
	//Parameters
	///////////////////////////////////////////////////////////////
	public:
		// Maximum number of iterations
		int m_MaxNbIter;

	///////////////////////////////////////////////////////////////
	// Internal functions 
	///////////////////////////////////////////////////////////////
	protected:
		// Perform 1 iteration
		int Iter();
		#ifdef VIRTUAL_VINCENT
			// Identify the tracks to (virtually) extend
			void LtTracker<TTree>::TracksToExtendIdentification(std::vector<int> tracksinds, int maxNbVirtual);
		#endif
		#ifdef FILTER_ANGLE_VINCENT
			void LtTracker<TTree>::ComputeFilteredAngle(int trackid);
		#endif

	///////////////////////////////////////////////////////////////
	// Display and debug functions
	///////////////////////////////////////////////////////////////
	public:
		// Set the image that will be displayed below the tracks
		void MxDisPlaySetBackgroundImage(unsigned short* im, int iminc, int imsize[2]);
		void MxDisPlaySetBackgroundImage(float* im, int iminc, int imsize[2]);
		// Display one track
		void MxDisplayTrack(int numfig, int trackind);
		// Display all tracks
		void MxDisplayTracks(int numfig);
		// Print current state in console
		void TxtDisplayCurrentState();
	};
}


#include "LtTracker.txx"

