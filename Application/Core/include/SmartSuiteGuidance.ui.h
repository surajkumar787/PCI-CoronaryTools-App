/*----------------------------------------------------
 |   This file was generated by Sense Composer 2.0   |
 |  Do not modify the Sense Composer Generated Code  |
 ----------------------------------------------------*/
#pragma once

#include <Sense.h>
#include <ExperienceIdentity.h>

#include "SmartSuiteTopGuidanceStandard.ui.h"
#include "SmartSuiteTopGuidanceStbContrast.ui.h"

using namespace Sense;
using namespace Sense::ExperienceIdentity;

namespace Pci { namespace Core { namespace UI
{

class SmartSuiteGuidanceUi : public Control
{
public:

	SmartSuiteGuidanceUi(Control &parent)
	:
		Control(parent)
		#pragma region Sense Composer (do not modify)
	,	spacer           (*this)
	,	topGuidanceSpacer((Control&)spacer)
	,	topStandard      (topGuidanceSpacer)
	,	topSBS           (topGuidanceSpacer)
	,	panelMessage     (*this)
	,	separator        (panelMessage)
	,	panel            (panelMessage)
	,	panelImage       (panel)
	,	picture          (panelImage)
	,	labelIcon        (picture)
	,	panelText        (panel)
	,	labelMessage     (panelText)
	,	labelMessageSubtext(panelText)
	,	labelGuidance    (panelText)
	,	separator2       (panelMessage)
		#pragma endregion
	{
		#pragma region Sense Composer (do not modify)
		layoutUpdateBegin();
		name                             = L"SmartSuiteGuidanceUi";
		size                             = Size(952, 952);
		spacer.size                      = Size(952, 564);
		spacer.layoutUseSpacing          = false;
		spacer.layoutHideInvisible       = false;
		spacer.layout                    = Layout::Fill;
		spacer.layoutSpacing             = 0;
		topGuidanceSpacer.name           = L"topGuidanceSpacer";
		topGuidanceSpacer.size           = Size(952, 564);
		topGuidanceSpacer.layoutHideInvisible = false;
		topGuidanceSpacer.layout         = Layout::Fill;
		topGuidanceSpacer.layoutSpacing  = 0;
		topGuidanceSpacer.layoutOrientation = Orientation::Horizontal;
		//topStandard.composerClass      = Control;
		topStandard.name                 = L"topStandard";
		topStandard.size                 = Size(476, 564);
		topStandard.layout               = Layout::Fill;
		//topSBS.composerClass           = Control;
		topSBS.name                      = L"topSBS";
		topSBS.position                  = Point(476, 0);
		topSBS.size                      = Size(476, 564);
		topSBS.layout                    = Layout::Fill;
		panelMessage.name                = L"panelMessage";
		panelMessage.position            = Point(0, 564);
		panelMessage.size                = Size(952, 388);
		panelMessage.layoutUseSpacing    = false;
		panelMessage.layoutHideInvisible = false;
		panelMessage.layout              = Layout::Fixed1d;
		separator.position               = Point(5, 0);
		separator.size                   = Size(942, 2);
		separator.layoutUseSpacing       = false;
		separator.layout                 = Layout::Fixed1d;
		separator.layoutOuterMargin      = Margin(5, 0, 5, 0);
		separator.color1                 = Palette::Gray150;
		separator.color2                 = Palette::Transparent * 0.00;
		panel.position                   = Point(0, 2);
		panel.size                       = Size(952, 302);
		panel.layoutUseSpacing           = false;
		panel.layoutHideInvisible        = false;
		panel.layout                     = Layout::Fixed1d;
		panel.layoutSpacing              = 0;
		panel.layoutOrientation          = Orientation::Horizontal;
		panel.border                     = Margin(0, 0, 0, 0);
		panel.edge                       = Margin(0, 0, 0, 0);
		panel.colorBorder                = Color::fromRgb(183, 178, 168);
		panel.color                      = Palette::Transparent * 0.00;
		panelImage.name                  = L"panelImage";
		panelImage.size                  = Size(164, 302);
		panelImage.layoutUseSpacing      = false;
		panelImage.layout                = Layout::Fixed1d;
		picture.name                     = L"picture";
		picture.position                 = Point(16, 24);
		picture.size                     = Size(140, 140);
		labelIcon.name                   = L"labelIcon";
		labelIcon.position               = Point(10, 44);
		labelIcon.size                   = Size(120, 40);
		labelIcon.font                   = Font(L"Philips Healthcare Font", 30, true, false, false, false, Font::Antialias::High);
		labelIcon.text                   = L"3D APC";
		labelIcon.horizontalAlign        = HAlign::Center;
		labelIcon.verticalAlign          = VAlign::Middle;
		panelText.name                   = L"panelText";
		panelText.position               = Point(180, 16);
		panelText.size                   = Size(764, 270);
		panelText.layoutUseSpacing       = false;
		panelText.layout                 = Layout::Fill;
		panelText.layoutOuterMargin      = Margin(16, 16, 8, 16);
		panelText.layoutSpacing          = 12;
		labelMessage.name                = L"labelMessage";
		labelMessage.size                = Size(764, 82);
		labelMessage.font                = Font(L"Philips Healthcare Font", 30, true, false, false, false, Font::Antialias::High);
		labelMessage.layout              = Layout::Fill;
		labelMessage.text                = L"Create angiogram while ensuring the catheter tip is always visible";
		labelMessage.textType            = TextType::WordWrap;
		labelMessage.color               = Palette::Gray070;
		labelMessage.outline             = Palette::Black;
		labelMessage.imageSpacing        = 8;
		labelMessageSubtext.name         = L"labelMessageSubtext";
		labelMessageSubtext.position     = Point(0, 94);
		labelMessageSubtext.size         = Size(764, 82);
		labelMessageSubtext.font         = Font(L"Philips Healthcare Font", 30, false, false, false, false, Font::Antialias::High);
		labelMessageSubtext.layout       = Layout::Fill;
		labelMessageSubtext.text         = L"DO NOT move table and C-arc";
		labelMessageSubtext.textType     = TextType::WordWrap;
		labelMessageSubtext.color        = Palette::Gray070;
		labelMessageSubtext.outline      = Palette::Black;
		labelMessageSubtext.imageSpacing = 8;
		labelMessageSubtext.imageHideEmpty = false;
		labelGuidance.name               = L"labelGuidance";
		labelGuidance.position           = Point(0, 188);
		labelGuidance.size               = Size(764, 82);
		labelGuidance.font               = Font(L"Philips Healthcare Font", 30, false, false, false, false, Font::Antialias::High);
		labelGuidance.layout             = Layout::Fill;
		labelGuidance.text               = L"Capture at least 3 heartbeats with contrast filled vessels";
		labelGuidance.textType           = TextType::WordWrap;
		labelGuidance.color              = Palette::Gray070;
		labelGuidance.outline            = Palette::Black;
		labelGuidance.imageSpacing       = 8;
		labelGuidance.imageHideEmpty     = false;
		separator2.position              = Point(5, 304);
		separator2.size                  = Size(942, 2);
		separator2.layoutUseSpacing      = false;
		separator2.layout                = Layout::Fixed1d;
		separator2.layoutOuterMargin     = Margin(5, 0, 5, 0);
		separator2.color1                = Palette::Gray150;
		separator2.color2                = Palette::Transparent * 0.00;
		layoutUpdateEnd();
		#pragma endregion
	}

	#pragma region Sense Composer (do not modify)
	private:   Spacer            spacer;
	public:    Spacer            topGuidanceSpacer;
	public:    SmartSuiteTopGuidanceStandard topStandard;
	public:    SmartSuiteTopGuidanceStbContrast topSBS;
	public:    Spacer            panelMessage;
	private:   Separator         separator;
	private:   Panel             panel;
	public:    Control           panelImage;
	public:    PictureBox        picture;
	public:    Label             labelIcon;
	public:    Control           panelText;
	public:    Label             labelMessage;
	public:    Label             labelMessageSubtext;
	public:    Label             labelGuidance;
	private:   Separator         separator2;
	#pragma endregion

private:

	SmartSuiteGuidanceUi(const SmartSuiteGuidanceUi&);
	SmartSuiteGuidanceUi& operator=(const SmartSuiteGuidanceUi&);
};
}}}

