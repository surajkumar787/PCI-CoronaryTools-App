/*----------------------------------------------------
|   This file was generated by Sense Composer 2.0   |
|  Do not modify the Sense Composer Generated Code  |
----------------------------------------------------*/
#pragma once

#include <Sense.h>
#include <ExperienceIdentity.h>
#include "arrowcontrol.h"

namespace Pci { namespace Core 
{
    using namespace Sense;
    using namespace Sense::ExperienceIdentity;

    class CountDownControlUi : public Control
    {
    public:

        CountDownControlUi(Control &parent)
            :
            Control(parent)
		#pragma region Sense Composer (do not modify)
	,	background       (*this)
	,	progressArea     (background)
	,	progressCircleArea((Control&)progressArea)
	,	progressCircle   (progressCircleArea)
	,	containerSeconds ((Control&)progressCircleArea)
	,	secondsValue     (containerSeconds)
	,	secondsLabel     (containerSeconds)
	,	panelDisableCircleOverlay(progressCircleArea)
	,	timerName        (progressCircleArea)
		#pragma endregion
        {
		#pragma region Sense Composer (do not modify)
		layoutUpdateBegin();
		name                             = L"CountDownControlUi";
		size                             = Size(280, 296);
		layoutSpacing                    = 0;
		background.name                  = L"background";
		background.size                  = Size(280, 296);
		background.layout                = Layout::Fill;
		background.border                = Margin(0, 0, 0, 0);
		background.edge                  = Margin(0, 0, 0, 0);
		background.color                 = Palette::Black;
		progressArea.name                = L"progressArea";
		progressArea.size                = Size(280, 296);
		progressArea.layoutUseSpacing    = false;
		progressArea.layout              = Layout::Fill;
		progressArea.layoutOrientation   = Orientation::Horizontal;
		progressCircleArea.name          = L"progressCircleArea";
		progressCircleArea.size          = Size(280, 296);
		progressCircleArea.layoutUseSpacing = false;
		progressCircleArea.layout        = Layout::Fill;
		progressCircleArea.layoutSpacing = 0;
		progressCircle.name              = L"progressCircle";
		progressCircle.size              = Size(280, 229);
		progressCircle.layout            = Layout::Fixed2d;
		progressCircle.maximum           = 100;
		progressCircle.value             = 50;
		progressCircle.width             = 0.22;
		containerSeconds.name            = L"containerSeconds";
		containerSeconds.size            = Size(88, 80);
		secondsValue.name                = L"secondsValue";
		secondsValue.size                = Size(88, 40);
		secondsValue.font                = Font(L"Philips Healthcare Font", 30, false, false, false, false, Font::Antialias::High);
		secondsValue.layoutUseSpacing    = false;
		secondsValue.layout              = Layout::Fill;
		secondsValue.text                = L"5";
		secondsValue.horizontalAlign     = HAlign::Center;
		secondsValue.verticalAlign       = VAlign::Bottom;
		secondsValue.imageSize           = Size(320, 320);
		secondsValue.imagePosition       = ImagePosition::Right;
		secondsLabel.name                = L"secondsLabel";
		secondsLabel.position            = Point(0, 40);
		secondsLabel.size                = Size(88, 40);
		secondsLabel.font                = Font(L"Philips Healthcare Font", 12, false, false, false, false, Font::Antialias::High);
		secondsLabel.layoutUseSpacing    = false;
		secondsLabel.layout              = Layout::Fill;
		secondsLabel.text                = L"seconds";
		secondsLabel.horizontalAlign     = HAlign::Center;
		panelDisableCircleOverlay.name   = L"panelDisableCircleOverlay";
		panelDisableCircleOverlay.position = Point(0, 80);
		panelDisableCircleOverlay.size   = Size(88, 88);
		panelDisableCircleOverlay.border = Margin(0, 0, 0, 0);
		panelDisableCircleOverlay.edge   = Margin(0, 0, 0, 0);
		panelDisableCircleOverlay.colorBorder = Palette::Transparent * 0.00;
		panelDisableCircleOverlay.colorEdge = Palette::Transparent * 0.00;
		panelDisableCircleOverlay.color  = Palette::Black * 0.50;
		timerName.name                   = L"timerName";
		timerName.position               = Point(0, 244);
		timerName.size                   = Size(280, 52);
		timerName.font                   = Font(L"Philips Healthcare Font", 32, false, false, false, false, Font::Antialias::High);
		timerName.layout                 = Layout::Fill;
		timerName.layoutOuterMargin      = Margin(0, 15, 0, 0);
		timerName.text                   = L"StentBoost";
		timerName.textType               = TextType::WordWrap;
		timerName.horizontalAlign        = HAlign::Center;
		layoutUpdateEnd();
		#pragma endregion
        }

	#pragma region Sense Composer (do not modify)
	public:    Panel             background;
	public:    Spacer            progressArea;
	public:    Spacer            progressCircleArea;
	public:    ProgressCircle    progressCircle;
	public:    Spacer            containerSeconds;
	public:    Label             secondsValue;
	public:    Label             secondsLabel;
	public:    Panel             panelDisableCircleOverlay;
	public:    Label             timerName;
	#pragma endregion

    private:

        CountDownControlUi(const CountDownControlUi&);
        CountDownControlUi& operator=(const CountDownControlUi&);
    };

}}
