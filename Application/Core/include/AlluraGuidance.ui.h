/*----------------------------------------------------
 |   This file was generated by Sense Composer 2.0   |
 |  Do not modify the Sense Composer Generated Code  |
 ----------------------------------------------------*/
#pragma once

#include <Sense.h>
#include <ExperienceIdentity.h>
#include "CrmThumbnail.h"
#include "PciXrayGeometryControl.h"
#include "PciThumbnail.h"

#include "AlluraTopGuidanceStandard.ui.h"
#include "AlluraTopGuidanceStbContrast.ui.h"

namespace Pci { namespace Core { namespace UI
{
using namespace Sense;
using namespace Sense::ExperienceIdentity;
using namespace Pci::Core;
using namespace PciSuite;

class AlluraGuidanceUi : public Control
{
public:

	AlluraGuidanceUi(Control &parent)
	:
		Control(parent)
		#pragma region Sense Composer (do not modify)
	,	topGuidanceSpacer(*this)
	,	topStandard      (topGuidanceSpacer)
	,	topSBS           (topGuidanceSpacer)
	,	panelMessage     (*this)
	,	panelImage       (panelMessage)
	,	picture          (panelImage)
	,	labelIcon        (picture)
	,	panelText        (panelMessage)
	,	labelMessage     (panelText)
	,	labelMessageSubtext(panelText)
	,	labelGuidance    (panelText)
		#pragma endregion
	{
		#pragma region Sense Composer (do not modify)
		layoutUpdateBegin();
		name                             = L"AlluraGuidanceUi";
		size                             = Size(1000, 1000);
		font                             = Font(L"Philips Healthcare Font", 29, false, false, false, false, Font::Antialias::High);
		topGuidanceSpacer.name           = L"topGuidanceSpacer";
		topGuidanceSpacer.size           = Size(1000, 696);
		topGuidanceSpacer.layout         = Layout::Fixed1d;
		topGuidanceSpacer.layoutOrientation = Orientation::Horizontal;
		//topStandard.composerClass      = Control;
		topStandard.name                 = L"topStandard";
		topStandard.size                 = Size(496, 696);
		topStandard.layout               = Layout::Fill;
		//topSBS.composerClass           = Control;
		topSBS.name                      = L"topSBS";
		topSBS.position                  = Point(504, 0);
		topSBS.size                      = Size(496, 696);
		topSBS.layout                    = Layout::Fill;
		panelMessage.name                = L"panelMessage";
		panelMessage.position            = Point(0, 696);
		panelMessage.size                = Size(1000, 304);
		panelMessage.layoutUseSpacing    = false;
		panelMessage.layout              = Layout::Fill;
		panelMessage.layoutSpacing       = 0;
		panelMessage.layoutOrientation   = Orientation::Horizontal;
		panelMessage.border              = Margin(1, 0, 0, 0);
		panelMessage.edge                = Margin(0, 0, 0, 0);
		panelMessage.color               = Color::fromRgb(145, 145, 145);
		panelImage.name                  = L"panelImage";
		panelImage.size                  = Size(164, 304);
		panelImage.layout                = Layout::Fixed2d;
		picture.name                     = L"picture";
		picture.position                 = Point(24, 24);
		picture.size                     = Size(140, 140);
		labelIcon.name                   = L"labelIcon";
		labelIcon.position               = Point(10, 44);
		labelIcon.size                   = Size(120, 40);
		labelIcon.font                   = Font(L"Philips Healthcare Font", 24, true, false, false, false, Font::Antialias::High);
		labelIcon.text                   = L"3D APC";
		labelIcon.horizontalAlign        = HAlign::Center;
		labelIcon.verticalAlign          = VAlign::Middle;
		panelText.name                   = L"panelText";
		panelText.position               = Point(188, 16);
		panelText.size                   = Size(803, 272);
		panelText.layout                 = Layout::Fill;
		panelText.layoutOuterMargin      = Margin(24, 16, 8, 16);
		panelText.layoutSpacing          = 12;
		labelMessage.name                = L"labelMessage";
		labelMessage.size                = Size(803, 83);
		labelMessage.font                = Font(L"Philips Healthcare Font", 29, true, false, false, false, Font::Antialias::High);
		labelMessage.layout              = Layout::Fill;
		labelMessage.text                = L"Create angiogram while ensuring the catheter tip is always visible";
		labelMessage.textType            = TextType::WordWrap;
		labelMessage.color               = Palette::Black;
		labelMessage.imageSpacing        = 8;
		labelMessageSubtext.name         = L"labelMessageSubtext";
		labelMessageSubtext.position     = Point(0, 95);
		labelMessageSubtext.size         = Size(803, 82);
		labelMessageSubtext.font         = Font(L"Philips Healthcare Font", 29, false, false, false, false, Font::Antialias::High);
		labelMessageSubtext.layout       = Layout::Fill;
		labelMessageSubtext.text         = L"DO NOT move table and C-arc";
		labelMessageSubtext.textType     = TextType::WordWrap;
		labelMessageSubtext.color        = Palette::Black;
		labelMessageSubtext.imageSpacing = 8;
		labelMessageSubtext.imageHideEmpty = false;
		labelGuidance.name               = L"labelGuidance";
		labelGuidance.position           = Point(0, 189);
		labelGuidance.size               = Size(803, 83);
		labelGuidance.font               = Font(L"Philips Healthcare Font", 29, false, false, false, false, Font::Antialias::High);
		labelGuidance.layout             = Layout::Fill;
		labelGuidance.text               = L"Capture at least 3 heartbeats with contrast filled vessels";
		labelGuidance.textType           = TextType::WordWrap;
		labelGuidance.color              = Palette::Black;
		labelGuidance.imageSpacing       = 8;
		labelGuidance.imageHideEmpty     = false;
		layoutUpdateEnd();
		#pragma endregion
	}

	#pragma region Sense Composer (do not modify)
	public:    Spacer            topGuidanceSpacer;
	public:    AlluraTopGuidanceStandard topStandard;
	public:    AlluraTopGuidanceStbContrast topSBS;
	public:    Panel             panelMessage;
	public:    Control           panelImage;
	public:    PictureBox        picture;
	public:    Label             labelIcon;
	public:    Control           panelText;
	public:    Label             labelMessage;
	public:    Label             labelMessageSubtext;
	public:    Label             labelGuidance;
	#pragma endregion

private:

	AlluraGuidanceUi(const AlluraGuidanceUi&);
	AlluraGuidanceUi& operator=(const AlluraGuidanceUi&);
};

}}}
