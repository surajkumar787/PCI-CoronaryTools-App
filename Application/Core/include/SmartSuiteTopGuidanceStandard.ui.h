/*----------------------------------------------------
 |   This file was generated by Sense Composer 2.0   |
 |  Do not modify the Sense Composer Generated Code  |
 ----------------------------------------------------*/
#pragma once

#include <Sense.h>
#include <ExperienceIdentity.h>

#include "CrmThumbnail.h"
#include "PciThumbnail.h"

using namespace Sense;
using namespace Sense::ExperienceIdentity;

namespace Pci { namespace Core { namespace UI
{

class SmartSuiteTopGuidanceStandard : public Control
{
public:

	SmartSuiteTopGuidanceStandard(Control &parent)
	:
		Control(parent)
		#pragma region Sense Composer (do not modify)
	,	spacer2          (*this)
	,	processing       (spacer2)
	,	imageRoadmap     (spacer2)
	,	imageHeader      (spacer2)
	,	spacer3          (*this)
	,	spacer4          ((Control&)spacer3)
	,	labelHeader      (spacer3)
	,	positionTarget   (spacer3, ViewType::SmartSuiteFlexVision)
	,	spacer5          ((Control&)spacer3)
	,	spacer6          ((Control&)spacer3)
	,	spacer7          ((Control&)spacer3)
		#pragma endregion
	{
		#pragma region Sense Composer (do not modify)
		layoutUpdateBegin();
		size                             = Size(952, 564);
		spacer2.position                 = Point(336, 132);
		spacer2.size                     = Size(280, 280);
		spacer2.layout                   = Layout::Fixed2d;
		spacer2.layoutOuterMargin        = Margin(0, 132, 0, 0);
		processing.name                  = L"processing";
		processing.size                  = Size(280, 93);
		processing.layoutUseSpacing      = false;
		processing.layout                = Layout::Fill;
		processing.determinate           = false;
		//imageRoadmap.composerClass     = Control;
		imageRoadmap.name                = L"imageRoadmap";
		imageRoadmap.position            = Point(0, 93);
		imageRoadmap.size                = Size(280, 94);
		imageRoadmap.visible             = false;
		imageRoadmap.layout              = Layout::Fill;
		//imageHeader.composerClass      = Control;
		imageHeader.name                 = L"imageHeader";
		imageHeader.position             = Point(0, 187);
		imageHeader.size                 = Size(280, 93);
		imageHeader.visible              = false;
		imageHeader.layoutUseSpacing     = false;
		imageHeader.layout               = Layout::Fill;
		spacer3.position                 = Point(0, 420);
		spacer3.size                     = Size(952, 144);
		spacer3.layoutHideInvisible      = false;
		spacer3.layout                   = Layout::Fill;
		spacer3.layoutSpacing            = 0;
		spacer4.size                     = Size(952, 6);
		spacer4.layout                   = Layout::Fill;
		labelHeader.name                 = L"labelHeader";
		labelHeader.position             = Point(0, 6);
		labelHeader.size                 = Size(952, 42);
		labelHeader.font                 = Font(L"Philips Healthcare Font", 30, false, false, false, false, Font::Antialias::High);
		labelHeader.layoutHideInvisible  = false;
		labelHeader.layout               = Layout::Fixed1d;
		labelHeader.text                 = L"Roadmap ready";
		labelHeader.textType             = TextType::WordWrap;
		labelHeader.color                = Palette::Gray070;
		labelHeader.outline              = Palette::Black;
		labelHeader.horizontalAlign      = HAlign::Center;
		//positionTarget.composerClass   = Control;
		positionTarget.name              = L"positionTarget";
		positionTarget.position          = Point(400, 48);
		positionTarget.size              = Size(152, 64);
		positionTarget.layoutUseSpacing  = false;
		positionTarget.layoutHideInvisible = false;
		positionTarget.layout            = Layout::Fixed2d;
		positionTarget.color             = Palette::Gray070;
		spacer5.position                 = Point(0, 112);
		spacer5.size                     = Size(952, 6);
		spacer5.layout                   = Layout::Fill;
		spacer6.position                 = Point(0, 118);
		spacer6.size                     = Size(952, 6);
		spacer6.layoutUseSpacing         = false;
		spacer6.layoutHideInvisible      = false;
		spacer6.layout                   = Layout::Fill;
		spacer7.position                 = Point(0, 124);
		spacer7.size                     = Size(952, 20);
		spacer7.layout                   = Layout::Fixed1d;
		layoutUpdateEnd();
		#pragma endregion
	}

	#pragma region Sense Composer (do not modify)
	private:   Spacer            spacer2;
	public:    ProgressCircle    processing;
	public:    CrmThumbnail      imageRoadmap;
	public:    PciThumbnail      imageHeader;
	private:   Spacer            spacer3;
	private:   Spacer            spacer4;
	public:    Label             labelHeader;
	public:    PciXrayGeometryControl positionTarget;
	private:   Spacer            spacer5;
	private:   Spacer            spacer6;
	private:   Spacer            spacer7;
	#pragma endregion

private:

	SmartSuiteTopGuidanceStandard(const SmartSuiteTopGuidanceStandard&);
	SmartSuiteTopGuidanceStandard& operator=(const SmartSuiteTopGuidanceStandard&);
};

}}}
