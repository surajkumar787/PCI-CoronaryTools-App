// Copyright Koninklijke Philips N.V. 2015
//
// All rights are reserved. Reproduction or transmission in whole or in part, in
// any form or by any means, electronic, mechanical or otherwise, is prohibited
// without the prior written consent of the copyright owner.

#include "service.h"

#include "exception.h"

#include <mergecom.h>
#include <atomic>

namespace CommonPlatform { namespace Dicom { namespace Merge
{
	static std::atomic<unsigned int> m_uniqueId;

	Service::Service(const std::string& mergeServiceName, const SyntaxList & syntaxList, Role role)
		: m_mergeServiceName(mergeServiceName)
		, m_sopClassUid     (serviceNameToSopClassUid(mergeServiceName))
		, m_name("__AutoGeneratedService_" + std::to_string(m_uniqueId++))
		, m_syntaxList(syntaxList)
		, m_handle          ()
	{
		if(m_sopClassUid.size() == 0) throw Exception(MC_SYSTEM_ERROR, "Invalid service name");
		std::string syntaxListName(syntaxList.name());
		int scu = ((role == Role::SCU) || (role == Role::BOTH)) ? 1 : 0;
		int scp = ((role == Role::SCP) || (role == Role::BOTH)) ? 1 : 0;
		mcCheck(
			MC_NewServiceFromName(to_charp(m_name), to_charp(m_mergeServiceName), to_charp(syntaxListName), scu, scp),
			"Error creating service"
			);

		std::string name(m_name); //create local variable, member cannot be passed by value in lambda
		m_handle.reset([name]{ MC_FreeService(to_charp(name)); });
	}

}}}